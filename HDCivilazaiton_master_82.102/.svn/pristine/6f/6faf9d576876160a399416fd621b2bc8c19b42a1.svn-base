package com.zhjy.hdcivilization.receiver;

import android.content.Context;
import android.content.Intent;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;

import com.baidu.android.pushservice.PushMessageReceiver;
import com.zhjy.hdcivilization.activity.AboutActivity;
import com.zhjy.hdcivilization.activity.ApplyCheckActivity;
import com.zhjy.hdcivilization.activity.LoginActivity;
import com.zhjy.hdcivilization.activity.MainActivity;
import com.zhjy.hdcivilization.activity.MineActivity;
import com.zhjy.hdcivilization.activity.MineSuperviseListActivity;
import com.zhjy.hdcivilization.activity.NoticeDetailActivity;
import com.zhjy.hdcivilization.dao.NoticeDao;
import com.zhjy.hdcivilization.dao.UserDao;
import com.zhjy.hdcivilization.entity.HDC_Notice;
import com.zhjy.hdcivilization.entity.ImgEntity;
import com.zhjy.hdcivilization.entity.User;
import com.zhjy.hdcivilization.exception.ContentException;
import com.zhjy.hdcivilization.utils.HDCivilizationConstants;
import com.zhjy.hdcivilization.utils.SharedPreferencesManager;
import com.zhjy.hdcivilization.utils.UiUtils;

import org.json.JSONException;
import org.json.JSONObject;

import java.util.List;

/**
 * @author :huangxianfeng on 2016/9/8.
 * 百度云推送的Receiver
 */
public class HDCiviReceiver extends PushMessageReceiver {

    public static AppCompatActivity currentActivity;
    private final  String TAG=HDCiviReceiver.class.getName();

    /**
     * 调用PushManager.startWork后，sdk将对push
     * server发起绑定请求，这个过程是异步的。绑定请求的结果通过onBind返回。 如果您需要用单播推送，需要把这里获取的channel
     * id和user id上传到应用server中，再调用server接口用channel id和user id给单个手机或者用户推送。
     *
     * @param context
     *            BroadcastReceiver的执行Context
     * @param errorCode
     *            绑定接口返回值，0 - 成功
     * @param appid
     *            应用id。errorCode非0时为null
     * @param userId
     *            应用user id。errorCode非0时为null
     * @param channelId
     *            应用channel id。errorCode非0时为null
     * @param requestId
     *            向服务端发起的请求id。在追查问题时有用；
     * @return none
     */
    @Override
    public void onBind(Context context, int errorCode, String appid,
                       String userId, String channelId, String requestId) {
        String responseString = "onBind errorCode=" + errorCode + " appid="
                + appid + " userId=" + userId + " channelId=" + channelId
                + " requestId=" + requestId;

        Log.d(TAG, "="+responseString);
        Log.d(TAG, "errorCode="+errorCode);
        //当绑定成功之后，进行保存channelId
        if (errorCode==0){
            SharedPreferencesManager.put(UiUtils.getInstance().getContext(),HDCivilizationConstants.CHANNELID,channelId);
        }
    }


    /**
     * PushManager.stopWork() 的回调函数。
     *
     * @param context
     *            上下文
     * @param errorCode
     *            错误码。0表示从云推送解绑定成功；非0表示失败。
     * @param requestId
     *            分配给对云推送的请求的id
     */
    @Override
    public void onUnbind(Context context, int errorCode, String requestId) {
        String responseString = "onUnbind errorCode=" + errorCode
                + " requestId = " + requestId;
        Log.d(TAG, responseString);
    }


    /**
     * setTags() 的回调函数。
     *
     * @param context
     *            上下文
     * @param errorCode
     *            错误码。0表示某些tag已经设置成功；非0表示所有tag的设置均失败。
     * @param
     *
     * @param failTags
     *            设置失败的tag
     * @param requestId
     *            分配给对云推送的请求的id
     */
    @Override
    public void onSetTags(Context context, int errorCode,
                          List<String> sucessTags, List<String> failTags, String requestId) {
        String responseString = "onSetTags errorCode=" + errorCode
                + " sucessTags=" + sucessTags + " failTags=" + failTags
                + " requestId=" + requestId;
        Log.d(TAG, responseString);

    }

    /**
     * delTags() 的回调函数。
     *
     * @param context
     *            上下文
     * @param errorCode
     *            错误码。0表示某些tag已经删除成功；非0表示所有tag均删除失败。
     * @param
     *
     * @param failTags
     *            删除失败的tag
     * @param requestId
     *            分配给对云推送的请求的id
     */
    @Override
    public void onDelTags(Context context, int errorCode,
                          List<String> sucessTags, List<String> failTags, String requestId) {
        String responseString = "onDelTags errorCode=" + errorCode
                + " sucessTags=" + sucessTags + " failTags=" + failTags
                + " requestId=" + requestId;
        Log.d(TAG, responseString);
    }

    /**
     * listTags() 的回调函数。
     *
     * @param context
     *            上下文
     * @param errorCode
     *            错误码。0表示列举tag成功；非0表示失败。
     * @param tags
     *            当前应用设置的所有tag。
     * @param requestId
     *            分配给对云推送的请求的id
     */
    @Override
    public void onListTags(Context context, int errorCode, List<String> tags,
                           String requestId) {
        String responseString = "onListTags errorCode=" + errorCode + " tags="
                + tags;
        Log.d(TAG, responseString);
    }


    /**
     * 接收透传消息的函数。
     *
     * @param context
     *            上下文
     * @param message
     *            推送的消息
     * @param customContentString
     *            自定义内容,为空或者json字符串
     */
    @Override
    public void onMessage(Context context, String message,
                          String customContentString) {

        String messageString = "透传消息 onMessage=\"" + message
                + "\" customContentString=" + customContentString;
        Log.d(TAG, messageString);
    }


    /**
     * 接收通知点击的函数。
     *
     * @param context
     *            上下文
     * @param title
     *            推送的通知的标题
     * @param description
     *            推送的通知的描述
     * @param customContentString
     *            自定义内容，为空或者json字符串
     */
    @Override
    public void onNotificationClicked(Context context, String title,
                                      String description, String customContentString) {
        String notifyString = "通知点击 onNotificationClicked title=\"" + title + "\" description=\""
                + description + "\" customContent=" + customContentString;
        Log.d(TAG, "notifyString = "+notifyString);
        Log.d(TAG, "customContentString0 = "+customContentString);

        try {
            JSONObject cusObj = new JSONObject(customContentString);
            String userId = getJsonValue(cusObj, "userId");
            String itemId = getJsonValue(cusObj, "itemId");
            String messageType = getJsonValue(cusObj, "messageType");
            String applyState = getJsonValue(cusObj,"applyState");
            Log.d(TAG, "customContentString11 messageType= "+messageType);

            if (HDCivilizationConstants.SEX.equals(messageType)){
                String contentTitle  = getJsonValue(cusObj, "title");
                String count = getJsonValue(cusObj, "count");
                long publishTime = cusObj.getLong("publishTime");
                String tipCount = getJsonValue(cusObj, "tipCount");
                String des = getJsonValue(cusObj, "des");

                JSONObject imgObj = cusObj.getJSONObject("imgObj");
                String imgUrl = getJsonValue(imgObj, "imgUrl");
                String imgId = getJsonValue(imgObj, "imgId");
                String thumbUrl = getJsonValue(imgObj, "thumbUrl");
                Log.d(TAG, "customContentString10 = "+contentTitle+";count = "+count+";publishTime="+publishTime+";tipCount = "+tipCount);

                HDC_Notice hdc_notice = NoticeDao.getInstance().getNotice(itemId);
                if (hdc_notice!=null){
                    hdc_notice.setTitle(contentTitle);
                    hdc_notice.setTipCount(Integer.parseInt(tipCount));
                    hdc_notice.setDianZanCount(Integer.parseInt(count));
                    hdc_notice.setPublishTimeLong(publishTime);
                    hdc_notice.setPublishTime(String.valueOf(publishTime));
                    hdc_notice.setDes(des);
                    ImgEntity imgEntity = new ImgEntity();
                    imgEntity.setItemId(imgId);
                    imgEntity.setImgUrl(imgUrl);
                    imgEntity.setImgThumbUrl(thumbUrl);
                    hdc_notice.setImgEntity(imgEntity);
                    NoticeDao.getInstance().saveNoticeObj(hdc_notice);
                }else{
                    HDC_Notice notice = new HDC_Notice();
                    notice.setItemId(itemId);
                    notice.setTitle(contentTitle);
                    notice.setTipCount(Integer.parseInt(tipCount));
                    notice.setDianZanCount(Integer.parseInt(count));
                    notice.setPublishTimeLong(publishTime);
                    notice.setPublishTime(String.valueOf(publishTime));
                    notice.setDes(des);
                    ImgEntity imgEntity = new ImgEntity();
                    imgEntity.setItemId(imgId);
                    imgEntity.setImgUrl(imgUrl);
                    imgEntity.setImgThumbUrl(thumbUrl);
                    notice.setImgEntity(imgEntity);
                    NoticeDao.getInstance().saveNoticeObj(notice);
                }
            }

            upDataToApp(userId, itemId, messageType,applyState);

        } catch (JSONException e) {
            Log.d(TAG, "customContentString12 e.getMessage() = "+e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * 接收通知到达的函数。
     *
     * @param context
     *            上下文
     * @param title
     *            推送的通知的标题
     * @param description
     *            推送的通知的描述
     * @param customContentString
     *            自定义内容，为空或者json字符串
     */
    @Override
    public void onNotificationArrived(Context context, String title,
                                      String description, String customContentString) {
        String notifyString = "通知到达 onNotificationArrived  title=\"" + title
                + "\" description=\"" + description + "\" customContent="
                + customContentString;
        Log.d(TAG, notifyString);
    }

    private void upDataToApp(String userId,String itemId,String messageType,String applyState) {

        if (HDCivilizationConstants.ONE.equals(messageType)){//App升级
            if(HDCiviReceiver.currentActivity==null){
                Intent versionUpGrade = new Intent(UiUtils.getInstance().getContext(), AboutActivity.class);
                versionUpGrade.putExtra(HDCivilizationConstants.VERSIONUP, HDCivilizationConstants.VERSIONUPGRADE);
                versionUpGrade.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                UiUtils.getInstance().getContext().startActivity(versionUpGrade);
            }else{
                Intent versionUpGrade = new Intent(UiUtils.getInstance().getContext(), AboutActivity.class);
                versionUpGrade.putExtra(HDCivilizationConstants.VERSIONUP, HDCivilizationConstants.VERSIONUPGRADE);
                HDCiviReceiver.currentActivity.startActivity(versionUpGrade);
            }


        }else if(HDCivilizationConstants.TWO.equals(messageType)){//提报审批的状态
            if(HDCiviReceiver.currentActivity==null){
                Intent supervise = new Intent(UiUtils.getInstance().getContext(), MineSuperviseListActivity.class);
                supervise.putExtra(HDCivilizationConstants.SUPERVISE_ITEMID, itemId);
                supervise.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                UiUtils.getInstance().getContext().startActivity(supervise);
            }else{
                Intent supervise = new Intent(UiUtils.getInstance().getContext(), MineSuperviseListActivity.class);
                supervise.putExtra(HDCivilizationConstants.SUPERVISE_ITEMID, itemId);
                HDCiviReceiver.currentActivity.startActivity(supervise);
            }


        }else if(HDCivilizationConstants.THREE.equals(messageType)){//文明贡献值兑换状态

        }else if(HDCivilizationConstants.FOUR.equals(messageType)){//志愿者申请状态

            if (getuserIdIs(userId) == false){
                if(HDCiviReceiver.currentActivity==null){
                    Intent intent1 = new Intent(UiUtils.getInstance().getContext(), MainActivity.class);
                    intent1.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                    UiUtils.getInstance().getContext().startActivity(intent1);
                }else{
                    Intent intent1 = new Intent(UiUtils.getInstance().getContext(), MainActivity.class);
                    HDCiviReceiver.currentActivity.startActivity(intent1);
                }
            }else{
                if (applyState.equals("0")){
                    Log.d(TAG, "customContentString8 = " + "__________________8");
                    if(HDCiviReceiver.currentActivity==null){
                        Intent volunteerApply = new Intent(UiUtils.getInstance().getContext(), ApplyCheckActivity.class);
                        volunteerApply.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                        UiUtils.getInstance().getContext().startActivity(volunteerApply);
                    }else{
                        Intent volunteerApply = new Intent(UiUtils.getInstance().getContext(), ApplyCheckActivity.class);
                        HDCiviReceiver.currentActivity.startActivity(volunteerApply);
                    }
                }else{
                    if(HDCiviReceiver.currentActivity==null){
                        Log.d(TAG, "customContentString9 = " + "__________________9");
                        Intent volunteerApply = new Intent(UiUtils.getInstance().getContext(), MineActivity.class);
                        volunteerApply.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                        UiUtils.getInstance().getContext().startActivity(volunteerApply);
                    }else{
                        Log.d(TAG, "customContentString9 = " + "__________________9");
                        Intent volunteerApply = new Intent(UiUtils.getInstance().getContext(), MineActivity.class);
                        HDCiviReceiver.currentActivity.startActivity(volunteerApply);
                    }
                }
            }
        }else if(HDCivilizationConstants.FIVE.equals(messageType)){//用户状态（禁用/启用）
            if (getuserId(userId) == false){
                if(HDCiviReceiver.currentActivity==null){
                    Intent intent1 = new Intent(UiUtils.getInstance().getContext(), MainActivity.class);
                    intent1.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                    UiUtils.getInstance().getContext().startActivity(intent1);
                }else{
                    Intent intent1 = new Intent(UiUtils.getInstance().getContext(), MainActivity.class);
                    HDCiviReceiver.currentActivity.startActivity(intent1);
                }
            }else{
                if(HDCiviReceiver.currentActivity==null){
                    Intent stopOrOpen = new Intent(UiUtils.getInstance().getContext(), LoginActivity.class);
                    stopOrOpen.putExtra(HDCivilizationConstants.VOLUNTEERAPPLY,userId);
                    stopOrOpen.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                    stopOrOpen.putExtra(LoginActivity.ISFROM_SPLASHACTIVITY, true);
                    UiUtils.getInstance().getContext().startActivity(stopOrOpen);
                }else{
                    Intent stopOrOpen = new Intent(UiUtils.getInstance().getContext(), LoginActivity.class);
                    stopOrOpen.putExtra(HDCivilizationConstants.VOLUNTEERAPPLY, userId);
                    stopOrOpen.putExtra(LoginActivity.ISFROM_SPLASHACTIVITY, true);
                    HDCiviReceiver.currentActivity.startActivity(stopOrOpen);
                }
            }
            Log.d(TAG, "customContentString5 = " + "__________________5");
        }else if(HDCivilizationConstants.SEX.equals(messageType)){//通知公告
            if(HDCiviReceiver.currentActivity==null){
                Intent noticeDetail = new Intent(UiUtils.getInstance().getContext(), NoticeDetailActivity.class);
                noticeDetail.putExtra(NoticeDetailActivity.ITEM_ID_AND_TYPE,itemId);
                noticeDetail.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                UiUtils.getInstance().getContext().startActivity(noticeDetail);
                Log.d(TAG, "customContentString6 = " + "__________________6");
            }else{
                Intent noticeDetail = new Intent(UiUtils.getInstance().getContext(), NoticeDetailActivity.class);
                noticeDetail.putExtra(NoticeDetailActivity.ITEM_ID_AND_TYPE,itemId);
                HDCiviReceiver.currentActivity.startActivity(noticeDetail);
                Log.d(TAG, "customContentString6 = " + "__________________6");
            }
        }
    }


    //判断是否字符串为空
    public String getJsonValue(JSONObject jsonObj, String propName) throws JSONException {
        if(jsonObj.has(propName)){
            return jsonObj.get(propName).toString();
        }else{
            return "";
        }
    }

    public boolean getuserIdIs(String userIdPush){
        try {
            User user = UserDao.getInstance().getLocalUser();
            String userId = user.getUserId();
            if (userId.equals(userIdPush)){
                return true;
            }else{
                return false;
            }
        } catch (ContentException e) {
            e.printStackTrace();
            return false;
        }
    }


    public boolean getuserId(String userIdPush){
        try {
            User user = UserDao.getInstance().getLocalUser();
            String userId = user.getUserId();
            if (userId.equals(userIdPush)){
                user.setIsLocalUser(false);
                UserDao.getInstance().saveUpDate(user);
                return true;
            }else{
                return false;
            }
        } catch (ContentException e) {
            e.printStackTrace();
            return false;
        }
    }

}
